@객체지향언어

	#객체지향 언어란?
	- Object-Oriented Programming, OOP
	- 객체(Object)란 세상에 존재하는 모든 것을 의미
	- 즉, 주변의 사물, 생명 등을 말한다.
	- 프로그래밍 관점에서는 객체들의 관계성을 사용하여 순차적으로 수행되는 프로그램 내에서 객체들 간에 관계를 형성하여 프로그램을 동작하게 함.

	#객체의 예시
	- 객체 = 데이터 + 기능
	- 객체 = 컴퓨터(PC)
	- 데이터(변수) = 모니터 본체, 키보드, 마우스, 스피커
	- 기능(메소드) = 화면출력 등

	#객체지향 언어의 특징
	- 상속
	- 캡슐화
	- 추상화
	- ☆다형성

	#상속
	- 의미 그대로 상위 클래스의 모든 것을 상속받아 사용하는 것
	- 부모와 자식 관계

	#캡슐화
	- 데이터 기능을 외부로부터 접근은 차단하고
	- 권한 또는 절차 없이 데이터를 변경 또는 기능 수행을 할 수 없게 캡슐처럼 보호함

	#추상화
	- 추상적인 요소들을 묶어서 분류하는 것
	- 학생, 선생, 학부모 등 사람이라는 추상적인 요소로 분류할 수 있음

	#다형성
	- 객체의 기능이 다양한 형태를 가질 수 있음
	- 상속과 깊은 관계를 가진다.
	- 한 부모 밑에서 태어난 자식이 완전히 같을 수 없듯이 객체 또한 부모 클래스로부터 상속받은 데이터와 기능을 자식 클래스에서 재정의하여 사용할 수 있음.

	#객체지향 언어의 장점
	- 재사용성 : 상속을 통해 코드의 재사용성을 높일 수 있음.
	- 생산성 향상 : 클래스 단위의 부품들을 조립
	- 유지보수의 우수성 : 구조화 된 소스코드 클래스단위로 소스코드를 관리할 수 있음.

	#객체지향 언어의 단점
	- 객체를 세분화하여 설계하여야 한다.
	- 실행 속도가 절차지향 언어 대비 느리다.
	- 상속으로 인하여 관계가 많이 형성되면 코딩의 난이도가 높아진다.

	#절차 VS 객체 지향언어
	- 절차 지향언어의 반대가 객체지향 언어가 아니다!
	- 객체 지향 언어도 절차지향언어에 속하지만
	- 객체라는 녀석들의 관계가 추가된 것이다.

@클래스

	#class 클래스
	- 객체에 대하여 정의해 놓은 설계도 혹은 '틀'

	#object
	- 클래스를 통해 구현할 수 있는 모든 대상
	- 즉, 해당 클래스로 구현한 인스턴스를 대표하는 의미

	#instance
	- 객체가 실제로 구현된 것
	- 클래스의 인스턴스라고 표현함.
 